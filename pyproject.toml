[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"
# https://docs.astral.sh/uv/concepts/projects/config/#build-systems
# https://docs.astral.sh/uv/concepts/projects/config/#build-isolation

[project]
name = "crossformer"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "absl-py>=0.12.0",
    "chex>=0.1.85",
    "distrax==0.1.5",
    # "dlimp @ git+https://github.com/kvablack/dlimp.git@main",  # @branch
    "einops>=0.6.1",
    "flax>=0.7.5",
    "gym>=0.26",
    "imageio>=2.31.1",
    "jax[cuda12]==0.5.3",
    "jaxlib==0.5.3",
    "ml_collections>=0.1.0",
    "ml_dtypes>=0.2.0",
    "moviepy>=1.0.3",
    "matplotlib",
    "numpy==1.26",
    "optax>=0.1.5",
    "orbax>=0.1.9",
    "orbax-checkpoint==0.11.20",
    "omegaconf>=2.3.0",
    "plotly>=5.16.1",
    "scipy==1.12.0",
    "tensorstore>=0.1.60",
    "tqdm",
    "transformers==4.43.1",
    "tensorflow>=2.15.0,<2.18.0",
    "tensorflow_datasets==4.9.2",
    "tensorflow_graphics==2021.12.3",
    "tensorflow_hub>=0.14.0",
    "tensorflow_probability==0.23.0",
    "tensorflow_text>=2.13.0",
    "wandb>=0.12.14",
    "tyro>=0.9.1",
    "opencv-python-headless>=4.11.0.86",
    "grain==0.2.6",
    "array-record>=0.8.1",
    "msgpack>=1.1.1",
    "webpolicy",
]

[dependency-groups]
dev = [
    "coverage>=7.10.6",
    "hypothesis>=6.139.2",
    "pre-commit==3.3.3",
    "pytest>=8.4.2",
    "pytest-cov>=7.0.0",
]

[tool.ruff]
target-version = "py311"
# line-length = 120

[tool.ruff.lint]
# https://docs.astral.sh/ruff/rules/
select = [  # list of rule codes Ruff should check
    "E",    # pycodestyle (includes E4/E7; whitespace/statement/import style)
    "W",    # pycodestyle whitespace-specific rules
    "F",    # pyflakes (undefined names, unused vars/imports, etc.)
    "I",    # isort (import sorting/merging)
    "UP",   # pyupgrade: modernize syntax based on target-version
    "C4",   # flake8-comprehensions: prefer comprehensions / remove redundant wrappers
    "SIM",  # flake8-simplify: simplify boolean logic / control flow
    "PIE",  # flake8-pie: small safe cleanups & niceties
    "PERF", # perflint: safe micro-optimizations
    "ISC",  # implicit string concatenation checks (see ignore for ISC001)
    "RUF",  # Ruff-specific rules (e.g., remove unused `# noqa`)
    # "RUF059", # Unpacked variable is never used
    #
    "T10",  # flake8-debugger: breakpoint()/pdb/ipdb/etc.
    "T20",  # flake8-print: print()/pprint()
]
ignore = [ # exceptions to select
    "F841",   # assigned but unused variable
    "F821",   # undefined name
    "E731",   # do not assign a lambda (style preference)
    "E722",   # do not use bare except (style preference)
    # "E402", # module import not at top of file
    "E501",   # line too long (let the formatter handle wrapping)
    "UP035",
    #
    "F722",   # Conflicts with array typing.
    "T201",   # We use print statements.
    "PD008",  # Lots of false positives.
    "ISC001", # Disabling to support ruff format.
    "RUF009", # Do not perform function call in dataclass defaults
]
# whitelist potentially 'unsafe' linter fixes
fixable = [
    "I", "W", "E4", "E7",
    "F401",   # unused imports
    "UP006",  # Use `list` instead of `List` for type annotation
    "UP007",  # Use `X | Y` for type annotations
    "UP045",  # Use `X | None` for type annotations
    "UP028", # Replace `yield` over `for` loop with `yield from`
    "C4",     # comprehension cleanups
    "SIM",    # simplify obvious boolean/control-flow patterns
    "PIE",    # tiny safe cleanups
    "PERF",   # safe micro-optimizations
    "RUF100", # remove unused `# noqa`
    "RUF001", # String contains ambiguous `â€“` (EN DASH). Did you mean `-` (HYPHEN-MINUS)?
    "B",    # flake8-bugbear: likely bugs / risky patterns
    "PTH",  # flake8-use-pathlib: prefer pathlib.Path over os.path/open
]
unfixable = [] # blacklist linter fixes

[tool.ruff.lint.per-file-ignores]
"**/__init__.py" = ["F401"] # allow unused imports in top-level __init__.py
"tests/**"       = ["T201","T203"] # allow print/pprint in tests

[tool.ruff.lint.isort]
order-by-type = false
force-single-line = true
force-sort-within-sections = true
# line-length = 120
single-line-exclusions = ["collections.abc", "typing", "typing_extensions"]
# known-third-party = ["wandb"]

# [tool.ruff.lint]
# https://docs.astral.sh/ruff/rules/
# select = [
# "B",
# "DTZ",
# "E4",
# "E7",
# "E9",
# "FBT",
# "FURB",
# "ICN",
# "ISC",
# "LOG",
# "N",
# "PD",
# "PLC",
# "PLE",
# "PLR1",
# "PLR5",
# "PLW",
# "PT",
# "PTH",
# "Q",
# "RET",
# "SLF",
# "T10",
# "T20",
# "W",
# ]
# ignore = [
#     "F722",   # Conflicts with array typing.
#     "T201",   # We use print statements.
#     "PD008",  # Lots of false positives.
#     "ISC001", # Disabling to support ruff format.
# ]
# unfixable = [
#     "B905", # Fix defaults to strict=False, which is not what we want.
# ]
#

# [tool.ruff]
# lint.select = ["B","PTH"]
# lint.ignore = ["E203","E501"]

[tool.pyright]
typeCheckingMode = "basic"
reportMissingTypeStubs = false
exclude = ["**/build","**/.venv","**/data"]

[tool.pytest.ini_options]
addopts = "-q --maxfail=1 --disable-warnings"
testpaths = ["tests"]

[tool.coverage.run]
source = ["crossformer"]
branch = true

[tool.coverage.report]
fail_under = 80
show_missing = true

[tool.uv.sources]
webpolicy = { git = "http://github.com/mhyatt000/webpolicy" }
